#pragma once

#include <vector>
#include <cstdlib> // for rand()
#include <ctime>   // for time()

#include "GameConstants.h"

// 테트로미노(블록)의 데이터와 동작을 관리하는 클래스입니다.
// 헤더 전용(Header-only)으로 구현되었습니다.
class Tetromino {
public:
	// 생성자: 새로운 테트로미노를 생성하고 초기화합니다.
	Tetromino ( ) {
		// 난수 시드 초기화 (애플리케이션 시작 시 한 번만 호출하는 것이 더 효율적이지만,
		// 클래스의 독립성을 위해 여기에 둡니다.)
		// srand(time(NULL)); // 이 코드는 main에서 한 번만 호출하는 것이 좋습니다.

		spawnNew ( );
	}

	// 소멸자
	~Tetromino ( ) {}

	// 새로운 모양과 위치로 테트로미노를 리셋(스폰)합니다.
	void spawnNew ( ) {
		// 7가지 모양 중 하나를 무작위로 선택합니다. (1~7)
		shapeType = ( rand ( ) % 7 ) + 1;

		// 위치와 회전 상태를 초기화합니다.
		position = vmath::ivec2 ( GameConstants::START_POS_X , GameConstants::START_POS_Y );
		rotation = 0;
	}

	// 테트로미노를 지정된 방향으로 이동시킵니다.
	// dx: x축 이동량, dy: y축 이동량
	void move ( int dx , int dy ) {
		position[ 0 ] += dx;
		position[ 1 ] += dy;
	}

	// 테트로미노를 회전시킵니다.
	// dir: 회전 방향 (1: 시계 방향, -1: 반시계 방향)
	void rotate ( int dir ) {
		rotation = ( rotation + dir + 4 ) % 4;
	}

	// --- Getter 함수들 ---

	// 현재 테트로미노의 X 좌표(그리드 기준)를 반환합니다.
	int getX ( ) const {
		return position[ 0 ];
	}

	// 현재 테트로미노의 Y 좌표(그리드 기준)를 반환합니다.
	int getY ( ) const {
		return position[ 1 ];
	}

	// 현재 테트로미노의 모양 타입(1-7)을 반환합니다.
	int getShapeType ( ) const {
		return shapeType;
	}

	// 현재 회전 상태(0-3)를 반환합니다.
	int getRotation ( ) const {
		return rotation;
	}

	// 특정 4x4 로컬 좌표에 블록이 있는지 확인합니다.
	// (r, c)는 0부터 3까지의 값입니다.
	// 블록이 있으면 shapeType을, 없으면 0을 반환합니다.
	int getBlock ( int r , int c ) const {
		return shapes[ shapeType ][ rotation ][ r ][ c ];
	}

private:
	int shapeType;      // 현재 조각의 모양 (1-7)
	int rotation;       // 현재 조각의 회전 상태 (0-3)
	vmath::ivec2 position; // 현재 조각의 그리드 상 위치 (x, y)

	// 모든 테트로미노의 모양과 회전 상태를 저장하는 정적 4차원 배열
	// shapes[shapeType][rotation][row][col]
	// 값 1은 블록이 있음을 의미합니다.
	static const int shapes[ 8 ][ 4 ][ 4 ][ 4 ];
};

// 정적 멤버 변수 초기화
// 각 테트로미노는 4x4 그리드 내에서 정의됩니다.
const int Tetromino::shapes[ 8 ][ 4 ][ 4 ][ 4 ] = {
	// [0] Empty (사용 안함)
	{{{0}}},
	// [1] I (일자)
	{
		{{0,0,0,0}, {1,1,1,1}, {0,0,0,0}, {0,0,0,0}},
		{{0,1,0,0}, {0,1,0,0}, {0,1,0,0}, {0,1,0,0}},
		{{0,0,0,0}, {1,1,1,1}, {0,0,0,0}, {0,0,0,0}},
		{{0,1,0,0}, {0,1,0,0}, {0,1,0,0}, {0,1,0,0}}
	},
	// [2] O (네모)
	{
		{{0,1,1,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0}},
		{{0,1,1,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0}},
		{{0,1,1,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0}},
		{{0,1,1,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0}}
	},
	// [3] T
	{
		{{0,1,0,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0}},
		{{0,1,0,0}, {0,1,1,0}, {0,1,0,0}, {0,0,0,0}},
		{{0,0,0,0}, {1,1,1,0}, {0,1,0,0}, {0,0,0,0}},
		{{0,1,0,0}, {1,1,0,0}, {0,1,0,0}, {0,0,0,0}}
	},
	// [4] J
	{
		{{0,1,0,0}, {0,1,0,0}, {1,1,0,0}, {0,0,0,0}},
		{{1,0,0,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0}},
		{{0,1,1,0}, {0,1,0,0}, {0,1,0,0}, {0,0,0,0}},
		{{0,0,0,0}, {1,1,1,0}, {0,0,1,0}, {0,0,0,0}}
	},
	// [5] L
	{
		{{0,1,0,0}, {0,1,0,0}, {0,1,1,0}, {0,0,0,0}},
		{{0,0,0,0}, {1,1,1,0}, {1,0,0,0}, {0,0,0,0}},
		{{1,1,0,0}, {0,1,0,0}, {0,1,0,0}, {0,0,0,0}},
		{{0,0,1,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0}}
	},
	// [6] S
	{
		{{0,1,1,0}, {1,1,0,0}, {0,0,0,0}, {0,0,0,0}},
		{{0,1,0,0}, {0,1,1,0}, {0,0,1,0}, {0,0,0,0}},
		{{0,1,1,0}, {1,1,0,0}, {0,0,0,0}, {0,0,0,0}},
		{{0,1,0,0}, {0,1,1,0}, {0,0,1,0}, {0,0,0,0}}
	},
	// [7] Z
	{
		{{1,1,0,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0}},
		{{0,0,1,0}, {0,1,1,0}, {0,1,0,0}, {0,0,0,0}},
		{{1,1,0,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0}},
		{{0,0,1,0}, {0,1,1,0}, {0,1,0,0}, {0,0,0,0}}
	}
};

